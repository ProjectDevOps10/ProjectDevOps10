# iAgent DevOps Development Container
# Contains all tools needed for AWS DevOps workflow

FROM ubuntu:22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    vim \
    nano \
    jq \
    ca-certificates \
    gnupg \
    lsb-release \
    python3 \
    python3-pip \
    build-essential \
    software-properties-common \
    apt-transport-https \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 18.x
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Install Docker CLI
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce-cli docker-compose-plugin \
    && rm -rf /var/lib/apt/lists/*

# Install AWS CLI v2
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip \
    && ./aws/install \
    && rm -rf aws awscliv2.zip

# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && chmod +x kubectl \
    && mv kubectl /usr/local/bin/

# Install AWS CDK
RUN npm install -g aws-cdk@latest

# Install additional useful tools
RUN npm install -g yarn pnpm typescript ts-node

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt-get update \
    && apt-get install gh -y \
    && rm -rf /var/lib/apt/lists/*

# Install Trivy for security scanning
RUN wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add - \
    && echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list \
    && apt-get update \
    && apt-get install trivy -y \
    && rm -rf /var/lib/apt/lists/*

# Install Helm
RUN curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list \
    && apt-get update \
    && apt-get install helm -y \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user
ARG USERNAME=devuser
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME \
    && rm -rf /var/lib/apt/lists/*

# Add user to docker group
RUN usermod -aG docker $USERNAME

# Create directories for AWS and kube configs
RUN mkdir -p /home/$USERNAME/.aws /home/$USERNAME/.kube \
    && chown -R $USERNAME:$USERNAME /home/$USERNAME/.aws /home/$USERNAME/.kube

# Switch to non-root user
USER $USERNAME

# Set working directory
WORKDIR /workspace

# Create helpful aliases and environment
RUN echo 'alias ll="ls -la"' >> /home/$USERNAME/.bashrc \
    && echo 'alias k="kubectl"' >> /home/$USERNAME/.bashrc \
    && echo 'alias d="docker"' >> /home/$USERNAME/.bashrc \
    && echo 'export PATH="$PATH:/home/$USERNAME/.local/bin"' >> /home/$USERNAME/.bashrc \
    && echo 'export AWS_DEFAULT_REGION=eu-central-1' >> /home/$USERNAME/.bashrc

# Install additional Node.js tools as user
RUN npm config set prefix '/home/$USERNAME/.local' \
    && npm install -g @aws-cdk/aws-eks @aws-cdk/aws-ec2

# Create a startup script directly in the container
RUN echo '#!/bin/bash' > /home/$USERNAME/startup.sh \
    && echo 'echo "🐳 Starting iAgent DevOps Container..."' >> /home/$USERNAME/startup.sh \
    && echo 'source /home/$USERNAME/.bashrc' >> /home/$USERNAME/startup.sh \
    && echo 'if [ ! -f "/workspace/package.json" ]; then' >> /home/$USERNAME/startup.sh \
    && echo '    echo "⚠️ Warning: Not in iAgent project directory"' >> /home/$USERNAME/startup.sh \
    && echo 'fi' >> /home/$USERNAME/startup.sh \
    && chown $USERNAME:$USERNAME /home/$USERNAME/startup.sh \
    && chmod +x /home/$USERNAME/startup.sh

# Display versions on container start
RUN echo '#!/bin/bash' > /home/$USERNAME/show-versions.sh \
    && echo 'echo "🐳 iAgent DevOps Development Container"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "================================"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "Node.js: $(node --version)"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "npm: $(npm --version)"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "AWS CLI: $(aws --version 2>&1 | cut -d" " -f1)"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "kubectl: $(kubectl version --client --short 2>/dev/null || echo "kubectl installed")"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "Docker: $(docker --version 2>/dev/null || echo "Docker CLI installed")"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "CDK: $(cdk --version)"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "Helm: $(helm version --short)"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "GitHub CLI: $(gh --version | head -n1)"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "Trivy: $(trivy --version | head -n1)"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo ""' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "🚀 Ready for iAgent DevOps workflow!"' >> /home/$USERNAME/show-versions.sh \
    && echo 'echo "Run: ./container-setup.sh to configure AWS and start deployment"' >> /home/$USERNAME/show-versions.sh \
    && chmod +x /home/$USERNAME/show-versions.sh

# Set the default command
CMD ["/bin/bash"]