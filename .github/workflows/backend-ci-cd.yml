# ESSENTIAL: Backend CI/CD - Builds and deploys the backend application
# This workflow is required for basic project operation
# It handles building, testing, and deploying the backend to EKS
name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_REGION: eu-central-1  # Frankfurt - closest to Israel
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com
  EKS_CLUSTER_NAME: iagent-cluster

jobs:
  # Build and Test Backend
  build-and-test:
    name: 🧪 Build and Test Backend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-backend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-backend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nx-backend-${{ runner.os }}-

      - name: 🧹 Run ESLint
        run: npx nx lint backend --format=stylish

      - name: 🧪 Run Tests
        run: npx nx test backend --coverage

      - name: 🏗️ Build Backend
        run: npx nx build backend

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: dist/apps/backend
          retention-days: 7

  # Build and Push Docker Image
  build-and-push-image:
    name: 🐳 Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ Building backend Docker image..."
          docker build -t $ECR_REGISTRY/iagent-backend:$IMAGE_TAG -t $ECR_REGISTRY/iagent-backend:latest -f apps/backend/Dockerfile .
          
          echo "📤 Pushing backend Docker image..."
          docker push $ECR_REGISTRY/iagent-backend:$IMAGE_TAG
          docker push $ECR_REGISTRY/iagent-backend:latest
          
          echo "✅ Backend image pushed successfully!"
          echo "📦 Image: $ECR_REGISTRY/iagent-backend:$IMAGE_TAG"

  # Deploy to EKS
  deploy-to-eks:
    name: 🚀 Deploy to EKS
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: 🚀 Deploy to EKS
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🔧 Updating deployment manifests..."
          # Update the image tag in the deployment manifests
          sed -i "s|\${ECR_REGISTRY}|$ECR_REGISTRY|g" apps/infrastructure/src/k8s/backend-deployment.yaml
          sed -i "s|:latest|:$IMAGE_TAG|g" apps/infrastructure/src/k8s/backend-deployment.yaml
          
          echo "📋 Applying Kubernetes manifests..."
          # Apply Kubernetes manifests
          kubectl apply -f apps/infrastructure/src/k8s/namespace.yaml
          kubectl apply -f apps/infrastructure/src/k8s/secrets.yaml
          kubectl apply -f apps/infrastructure/src/k8s/backend-deployment.yaml
          
          echo "⏳ Waiting for deployment to be ready..."
          # Wait for deployment to be ready
          kubectl rollout status deployment/iagent-backend -n iagent --timeout=300s
          
          echo "✅ Backend deployed successfully to EKS!"

      - name: 📊 Deployment Status
        run: |
          echo "📋 Pod Status:"
          kubectl get pods -n iagent -l app=iagent-backend
          
          echo "🌐 Service Status:"
          kubectl get svc -n iagent
          
          echo "📈 Deployment Status:"
          kubectl get deployment iagent-backend -n iagent

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/backend'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif' 