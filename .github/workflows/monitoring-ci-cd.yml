name: Monitoring CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_REGION: eu-central-1  # Frankfurt - closest to Israel

jobs:
  # Build and Test Monitoring
  build-and-test:
    name: 🧪 Build and Test Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-monitoring-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-monitoring-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nx-monitoring-${{ runner.os }}-

      - name: 🧹 Run ESLint
        run: npx nx lint monitoring --format=stylish

      - name: 🧪 Run Tests
        run: npx nx test monitoring --coverage

      - name: 🏗️ Build Monitoring
        run: npx nx build monitoring

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-build
          path: dist/apps/monitoring
          retention-days: 7

  # Deploy Monitoring
  deploy-monitoring:
    name: 🚀 Deploy Monitoring
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install AWS CDK
        run: npm install -g aws-cdk

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-monitoring-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-monitoring-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nx-monitoring-${{ runner.os }}-

      - name: 🏗️ Build Monitoring
        run: npx nx build monitoring

      - name: 🔧 Bootstrap CDK (if needed)
        run: |
          cd dist/apps/monitoring
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} || echo "CDK already bootstrapped"

      - name: 🚀 Deploy Monitoring
        run: |
          cd dist/apps/monitoring
          echo "🚀 Deploying monitoring infrastructure to AWS..."
          cdk deploy --all --require-approval never
          
          echo "✅ Monitoring infrastructure deployed successfully!"

      - name: 📊 Monitoring Status
        run: |
          echo "📊 CloudWatch Dashboards:"
          aws cloudwatch list-dashboards --region ${{ env.AWS_REGION }} --query 'DashboardEntries[?contains(DashboardName, `iagent`)].DashboardName' --output table || echo "No dashboards found"
          
          echo "🚨 CloudWatch Alarms:"
          aws cloudwatch describe-alarms --region ${{ env.AWS_REGION }} --query 'MetricAlarms[?contains(AlarmName, `iagent`)].AlarmName' --output table || echo "No alarms found"
          
          echo "📝 SNS Topics:"
          aws sns list-topics --region ${{ env.AWS_REGION }} --query 'Topics[?contains(TopicArn, `iagent`)].TopicArn' --output table || echo "No SNS topics found"

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/monitoring'
          format: 'sarif'
          output: 'trivy-monitoring-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-monitoring-results.sarif' 