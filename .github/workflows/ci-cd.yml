# ESSENTIAL: Main CI/CD Pipeline - Core build and deployment workflow
# This workflow is required for basic project operation
# It handles building, testing, and deploying the main applications
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1  # Frankfurt - closest to Israel
  CLUSTER_NAME: iagent-cluster
  ECR_REPOSITORY_BACKEND: iagent-backend
  ECR_REPOSITORY_FRONTEND: iagent-frontend

jobs:
  # Continuous Integration
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Sync TypeScript project references
      run: npx nx sync --yes
      
    - name: Run linting
      run: npx nx run-many --target=lint --all --yes
      
    - name: Run tests
      run: npx nx run-many --target=test --all --yes
      
    - name: Build applications
      run: npx nx run-many --target=build --projects=frontend,backend --yes
      
    - name: Build infrastructure
      run: npx nx build infrastructure --yes
      
    - name: Build monitoring
      run: npx nx build monitoring --yes

  # Continuous Deployment (only on main branch)
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Sync TypeScript project references
      run: npx nx sync --yes
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -f apps/backend/Dockerfile .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest -f apps/backend/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        
    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -f apps/frontend/Dockerfile .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest -f apps/frontend/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        
    - name: Deploy infrastructure (if needed)
      run: |
        # Check if infrastructure exists, if not deploy it
        if ! aws cloudformation describe-stacks --stack-name IAgentInfrastructureStack --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "Infrastructure not found, deploying..."
          npx nx run infrastructure:deploy --yes
        else
          echo "Infrastructure already exists, skipping deployment"
        fi
        
    - name: Deploy monitoring (if needed)
      run: |
        # Check if monitoring exists, if not deploy it
        if ! aws cloudformation describe-stacks --stack-name IAgentMonitoringStack --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "Monitoring not found, deploying..."
          npx nx run monitoring:deploy --yes
        else
          echo "Monitoring already exists, skipping deployment"
        fi
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      
    - name: Deploy to Kubernetes
      run: |
        # Apply namespace
        kubectl apply -f apps/infrastructure/src/k8s/namespace.yaml
        
        # Apply secrets if they exist
        if [ -f "apps/infrastructure/src/k8s/secrets.yaml" ]; then
          kubectl apply -f apps/infrastructure/src/k8s/secrets.yaml
        fi
        
        # Update deployment with new image
        kubectl set image deployment/iagent-backend iagent-backend=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }} -n iagent
        
        # Wait for rollout
        kubectl rollout status deployment/iagent-backend -n iagent --timeout=300s
        
    - name: Verify deployment
      run: |
        kubectl get pods -n iagent
        kubectl get services -n iagent
        
    - name: Post deployment notification
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üìä Application deployed to EKS cluster: ${{ env.CLUSTER_NAME }}"
        echo "üê≥ Images pushed to ECR with tag: ${{ github.sha }}"

  # Infrastructure Management
  infrastructure:
    name: Infrastructure Management
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[INFRA]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy Infrastructure
      if: contains(github.event.head_commit.message, '[INFRA-DEPLOY]')
      run: |
        npx nx run infrastructure:deploy --yes
        npx nx run monitoring:deploy --yes
        
    - name: Destroy Infrastructure
      if: contains(github.event.head_commit.message, '[INFRA-DESTROY]')
      run: |
        npx nx run monitoring:destroy --yes
        npx nx run infrastructure:destroy --yes 